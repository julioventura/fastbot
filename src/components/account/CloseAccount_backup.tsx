// Componente: CloseAccount
// Funcional      // Primeiro, verificar TODAS as depend√™ncias do usu√°rio
      try {
        const { data: checkData, error: checkError } = await supabase.rpc('check_all_user_dependencies');
        
        if (checkData && checkData.success) {
          console.log('üìã Todas as depend√™ncias do usu√°rio encontradas:', checkData);
          console.log('üìä Resumo completo das depend√™ncias:', checkData.dependencies);
        } else {
          console.log('‚ö†Ô∏è Erro ao verificar depend√™ncias:', checkData || checkError);
        }
      } catch (checkErr) {
        console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar depend√™ncias, continuando...', checkErr);
      }
      
      // Tentar a nova fun√ß√£o ULTIMATE de exclus√£o
      console.log('üóëÔ∏è Executando exclus√£o ULTIMATE da conta (trata mychatbot + mychatbot_2 + todas as foreign keys)...');
      const { data, error } = await supabase.rpc('delete_user_account_ultimate');omponente renderiza um card com op√ß√£o para fechar/excluir permanentemente a conta do usu√°rio.
// Inclui um modal de confirma√ß√£o para evitar exclus√µes acidentais.
// Utiliza componentes de UI do shadcn/ui para a estrutura do card, bot√£o e modal.
//
// Fun√ß√µes e Constantes Principais:
// - CloseAccountProps (Interface): Define as propriedades esperadas pelo componente.
//   - userEmail (string): Email do usu√°rio para identifica√ß√£o na exclus√£o.
//   - onAccountDeleted (function): Fun√ß√£o chamada ap√≥s exclus√£o bem-sucedida.
// - CloseAccount (Componente): Componente funcional React que renderiza o card de fechamento de conta.
//   - Props: `userEmail`, `onAccountDeleted`.
// - handleDeleteAccount (fun√ß√£o): Executa a exclus√£o da conta do usu√°rio.

import React, { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from "@/components/ui/alert-dialog";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";

// Interface CloseAccountProps
// Define as propriedades que o componente CloseAccount aceita.
interface CloseAccountProps {
  userEmail: string; // Email do usu√°rio para identifica√ß√£o na exclus√£o.
  onAccountDeleted: () => Promise<void>; // Fun√ß√£o chamada ap√≥s exclus√£o bem-sucedida.
}

// Componente CloseAccount
// Renderiza um card com op√ß√£o para fechar/excluir permanentemente a conta.
const CloseAccount = ({ userEmail, onAccountDeleted }: CloseAccountProps) => {
  const [isDeleting, setIsDeleting] = useState(false);
  const { toast } = useToast();

  // Fun√ß√£o para executar a exclus√£o da conta
  const handleDeleteAccount = async () => {
    setIsDeleting(true);
    
    try {
      console.log('üîç Iniciando processo de exclus√£o da conta...');
      
      // Primeiro, investigar todas as refer√™ncias do usu√°rio
      try {
        const { data: checkData, error: checkError } = await supabase.rpc('investigate_user_references');
        
        if (checkData && checkData.success) {
          console.log('ÔøΩ Refer√™ncias do usu√°rio encontradas:', checkData);
          console.log('üìä Detalhes das refer√™ncias:', checkData.references_found);
        } else {
          console.log('‚ö†Ô∏è Erro ao verificar refer√™ncias:', checkData || checkError);
        }
      } catch (checkErr) {
        console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar refer√™ncias, continuando...', checkErr);
      }
      
      // Tentar a nova fun√ß√£o ultra-robusta de exclus√£o
      console.log('üóëÔ∏è Executando exclus√£o ultra-robusta da conta...');
      const { data, error } = await supabase.rpc('delete_user_account_ultra_safe');
      
      console.log('üì§ Resposta da fun√ß√£o delete_user_account_ultra_safe:', { data, error });
      
      if (error) {
        console.error('‚ùå Erro na fun√ß√£o RPC:', error);
        throw new Error(`Erro na fun√ß√£o RPC: ${error.message}`);
      }
      
      if (data && data.success) {
        console.log('‚úÖ Exclus√£o bem-sucedida:', data);
        console.log('üìà Detalhes da exclus√£o:', data.details);
        
        toast({
          title: "Conta exclu√≠da com sucesso",
          description: `Sua conta (${data.details?.user_email}) foi permanentemente exclu√≠da. Redirecionando...`,
          variant: "default",
        });
        
        // Aguardar um pouco antes do callback para garantir que a exclus√£o foi processada
        setTimeout(async () => {
          console.log('üö™ Executando logout e redirecionamento...');
          await onAccountDeleted();
        }, 1500);
        
      } else {
        // Fun√ß√£o retornou mas com erro
        const errorMsg = data?.message || 'Erro desconhecido na exclus√£o';
        const errorCode = data?.error_code || 'UNKNOWN_ERROR';
        const sqlError = data?.sql_error || '';
        
        console.error('‚ùå Falha na exclus√£o:', data);
        
        let userFriendlyMessage = errorMsg;
        
        if (sqlError.includes('user_roles_granted_by_fkey')) {
          userFriendlyMessage = 'N√£o √© poss√≠vel deletar a conta porque voc√™ concedeu permiss√µes para outros usu√°rios. Entre em contato com o administrador.';
        } else if (sqlError.includes('foreign key')) {
          userFriendlyMessage = 'N√£o √© poss√≠vel deletar a conta devido a depend√™ncias no sistema. Entre em contato com o suporte.';
        }
        
        toast({
          title: "Erro ao excluir conta",
          description: userFriendlyMessage,
          variant: "destructive",
        });
      }
      
    } catch (error: unknown) {
      console.error('üí• Erro geral ao excluir conta:', error);
      
      let errorMessage = 'Erro inesperado ao tentar excluir a conta.';
      
      if (error instanceof Error && error.message) {
        errorMessage = error.message;
        
        // Tratar erros espec√≠ficos
        if (error.message.includes('user_roles_granted_by_fkey')) {
          errorMessage = 'N√£o √© poss√≠vel deletar a conta porque voc√™ concedeu permiss√µes para outros usu√°rios.';
        }
      }
      
      toast({
        title: "Erro ao excluir conta", 
        description: `${errorMessage} Entre em contato com o suporte se o problema persistir.`,
        variant: "destructive",
      });
      
    } finally {
      setIsDeleting(false);
    }
  };

  return (
    <div className="space-y-4">
      {/* Aviso sobre exclus√£o permanente */}
      <div className="p-4 bg-destructive/10 border border-destructive/30 rounded-lg">
        <p className="text-sm text-destructive font-medium">
          ‚ö†Ô∏è A√ß√£o irrevers√≠vel
        </p>
        <p className="text-sm text-muted-foreground mt-1">
          Esta a√ß√£o excluir√° permanentemente sua conta e todos os dados associados. N√£o ser√° poss√≠vel recuperar as informa√ß√µes.
        </p>
      </div>
      
      {/* Modal de confirma√ß√£o com bot√£o de exclus√£o */}
      <div className="pt-4">
        <AlertDialog>
          <AlertDialogTrigger asChild>
            <Button
              variant="destructive"
              className="w-full"
              disabled={isDeleting}
            >
              {isDeleting ? "Excluindo..." : "Fechar a conta"}
            </Button>
          </AlertDialogTrigger>
          <AlertDialogContent className="bg-background border border-border">
            <AlertDialogHeader>
              <AlertDialogTitle className="text-foreground">
                Confirmar exclus√£o da conta
              </AlertDialogTitle>
              <AlertDialogDescription className="text-muted-foreground">
                Tem certeza de que deseja excluir permanentemente sua conta?
                <br />
                <br />
                <strong>Esta a√ß√£o n√£o pode ser desfeita e resultar√° em:</strong>
                <br />
                ‚Ä¢ Exclus√£o de todos os seus dados pessoais
                <br />
                ‚Ä¢ Remo√ß√£o de todas as configura√ß√µes
                <br />
                ‚Ä¢ Perda de acesso permanente √† plataforma
                <br />
                <br />
                Email da conta: <strong>{userEmail}</strong>
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
              <AlertDialogCancel className="bg-secondary text-secondary-foreground hover:bg-secondary/80">
                Cancelar
              </AlertDialogCancel>
              <AlertDialogAction
                onClick={handleDeleteAccount}
                disabled={isDeleting}
                className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
              >
                {isDeleting ? "Excluindo..." : "Sim, excluir conta"}
              </AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      </div>
    </div>
  );
};

export default CloseAccount;