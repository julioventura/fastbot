/**
 * Demonstra√ß√£o: Como o Logging Condicional Funciona
 * 
 * Este arquivo demonstra a diferen√ßa entre produ√ß√£o e desenvolvimento
 * em termos de logging no FastBot.
 */

// Simular ambientes
console.log('='.repeat(60));
console.log('üß™ DEMONSTRA√á√ÉO: LOGGING CONDICIONAL');
console.log('='.repeat(60));

// Importar o logger
import { loggers, getLoggerConfig } from './src/lib/utils/logger';

const logger = loggers.chatbot;

console.log('\nüìä CONFIGURA√á√ÉO ATUAL:');
console.log(JSON.stringify(getLoggerConfig(), null, 2));

console.log('\nüîπ LOGS EM DESENVOLVIMENTO:');
console.log('Todos os n√≠veis ativos (debug, info, warn, error)');
logger.debug('Este √© um log de debug - vis√≠vel apenas em DEV');
logger.info('Este √© um log de info');
logger.warn('Este √© um log de warning');
logger.error('Este √© um log de erro');

console.log('\nüîπ LOGS EM PRODU√á√ÉO:');
console.log('Apenas logs importantes (warn, error)');
console.log('Os logs debug e info s√£o suprimidos automaticamente');

console.log('\n‚úÖ BENEF√çCIOS:');
console.log('‚Ä¢ Performance melhorada em produ√ß√£o');
console.log('‚Ä¢ Console mais limpo para usu√°rios finais');
console.log('‚Ä¢ Logs detalhados mantidos para desenvolvimento');
console.log('‚Ä¢ Configura√ß√£o autom√°tica baseada no ambiente');

console.log('\nüìà ANTES (console.log manual):');
console.log('üîß [useShortMemory] ===== ADICIONANDO MENSAGEM =====');
console.log('üîß [useShortMemory] Role: user');
console.log('üîß [useShortMemory] Content: Hello world...');
console.log('üîß [useShortMemory] ===== FIM =====');

console.log('\nüìà AGORA (logging condicional):');
logger.debug('===== ADICIONANDO MENSAGEM =====');
logger.debug('Par√¢metros:', { role: 'user', content: 'Hello world...' });
logger.info('Mensagem adicionada com sucesso');
logger.debug('===== FIM =====');

console.log('\n' + '='.repeat(60));
